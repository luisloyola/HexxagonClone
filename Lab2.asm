.data

ESPACIO: .asciiz " "

# El display parte en la direccion de memoria 0x100100000 que es el primer segmento de dato que se encuetra
# en el area .data
# Por eso "display" debe ir antes que todos los demas datos
display: .word 0:262144 # 262144=512*512; 131072 = 512*256

vecinos1: .word 0:24 	# espacio para guardar los vecinos de una celda, cuando se llama a las funciones get_vecinos1 y get_vecinos2
					# los valores representan (i, j, matrix[i][j], &matrix[i][j]), por lo que son 12 vecinos.
vecinos2: .word 0:48 	# espacio para guardar los vecinos de una celda, cuando se llama a las funciones get_vecinos1 y get_vecinos2
					# los valores representan (i, j, matrix[i][j], &matrix[i][j]), por lo que son 12 vecinos.

#Valores de las celdas: 0=nulo, 1=vacio, 2=player1, 3=player2
matrix: .word   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0,
				0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
				0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
				0, 0, 1, 1, 1, 1, 0, 1, 1,  1, 1,0, 0,
				0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0,
				0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
				0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
				0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

#posiciones del tablero (offset) de las celdas en el display.	
tablero: .word  0, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 
				1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 
				2600, 2700, 2800, 2900, 3000, 3100, 3200, 3300, 3400, 3500, 3600, 3700, 3800, 
				3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900, 5000, 5100, 
				5200, 5300, 5400, 5500, 5600, 5700, 5800, 5900, 6000, 6100, 6200, 6300, 6400, 
				6500, 6600, 6700, 6800, 6900, 7000, 7100, 7200, 7300, 7400, 7500, 7600, 7700, 
				7800, 7900, 8000, 8100, 8200, 8300, 8400, 8500, 8600, 8700, 8800, 8900, 9000, 
				9100, 9200, 9300, 9400, 9500, 9600, 9700, 9800, 9900, 10000, 10100, 10200, 10300, 
				10400, 10500, 10600, 10700, 10800, 10900, 11000, 11100, 11200, 11300, 11400, 11500, 11600, 
				11700, 11800, 11900, 12000, 12100, 12200, 12300, 12400, 12500, 12600, 12700, 12800, 12900, 
				13000, 13100, 13200, 13300, 13400, 13500, 13600, 13700, 13800, 13900, 14000, 14100, 14200, 
				14300, 14400, 14500, 14600, 14700, 14800, 14900, 15000, 15100, 15200, 15300, 15400, 15500, 
				15600, 15700, 15800, 15900, 16000, 16100, 16200, 16300, 16400, 16500, 16600, 16700, 16800, 
						
				

###___Sprites___####
warrior: .word 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x3d2214, 0x3d2214, 0xaf7a18, 0x764221, 0xaf7a18, 0x764221, 0x764221, 0x3d2214, 0x3d2214, 0x3d2214, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x3d2214, 0x000000, 0x000000, 0x3d2214, 0x764221, 0xaf7a18, 0x764221, 0x764221, 0x764221, 0xaf7a18, 0xaf7a18, 0xbfab73, 0xaf7a18, 0x3d2214, 0x3d2214, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x3d2214, 0xaf7a18, 0x3d2214, 0x3d2214, 0x764221, 0xaf7a18, 0xf3d887, 0xf3d887, 0xaf7a18, 0x764221, 0xf3d887, 0xf3d887, 0xaf7a18, 0xbfab73, 0x764221, 0x3d2214, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x3d2214, 0xaf7a18, 0xaf7a18, 0xf3d887, 0xaf7a18, 0x764221, 0xaf7a18, 0xaf7a18, 0x764221, 0x764221, 0xbfab73, 0xbfab73, 0xaf7a18, 0xaf7a18, 0x764221, 0x764221, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xa19a91, 0xffffce, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x3d2214, 0xf3d887, 0xaf7a18, 0x764221, 0xaf7a18, 0xbfab73, 0xbfab73, 0xaf7a18, 0x764221, 0xaf7a18, 0xbfab73, 0xf3d887, 0xbfab73, 0xaf7a18, 0x764221, 0x3d2214, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffce, 0xffffce, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x3d2214, 0x3d2214, 0xaf7a18, 0x764221, 0xaf7a18, 0xf3d887, 0xbfab73, 0xaf7a18, 0xaf7a18, 0x764221, 0x764221, 0xbfab73, 0xaf7a18, 0xf3d887, 0xbfab73, 0xaf7a18, 0x3d2214, 0x3d2214, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffce, 0xa19a91, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x3d2214, 0xaf7a18, 0xaf7a18, 0x764221, 0x764221, 0xf3d887, 0xaf7a18, 0xbfab73, 0x764221, 0x3d2214, 0x5d422f, 0x3d2214, 0x764221, 0xaf7a18, 0xbfab73, 0xaf7a18, 0x764221, 0xaf7a18, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffce, 0xffffce, 0xa19a91, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xa19a91, 0xa19a91, 0x000000, 0x210614, 0x020101, 0x3d2214, 0x764221, 0xaf7a18, 0x764221, 0x764221, 0x3d2214, 0x3d2214, 0xf6d39b, 0xc5956a, 0xc5956a, 0x3d2214, 0xaf7a18, 0xbfab73, 0x764221, 0x3d2214, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xa19a91, 0xffffce, 0xa19a91, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xa19a91, 0xa19a91, 0x000000, 0x690039, 0x9e005d, 0x764221, 0x764221, 0xaf7a18, 0x764221, 0x3d2214, 0xa9794f, 0xc5956a, 0xf6d39b, 0xf6d39b, 0xa9794f, 0x3d2214, 0xaf7a18, 0x764221, 0xaf7a18, 0x764221, 0x3d2214, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xa19a91, 0xffffce, 0xffffce, 0xa19a91, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xa19a91, 0xa19a91, 0xffffce, 0x000000, 0x9e005d, 0xef5ba1, 0x743c22, 0x3d2214, 0x764221, 0x3d2214, 0x000000, 0xa9794f, 0x73432b, 0xa9794f, 0xf6d39b, 0x73432b, 0xa9794f, 0x764221, 0xaf7a18, 0x764221, 0x3d2214, 0x3d2214, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffce, 0xffffce, 0xa19a91, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xa19a91, 0xffffce, 0xa19a91, 0x000000, 0x9e005d, 0xef5ba1, 0x690039, 0x3d2214, 0x764221, 0x000000, 0x5d422f, 0xc5956a, 0xf6d39b, 0x73432b, 0xf6d39b, 0xf6d39b, 0xa9794f, 0x000000, 0x3d2214, 0x764221, 0xaf7a18, 0x764221, 0x3d2214, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xa19a91, 0xffffce, 0xa19a91, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffce, 0xffffce, 0x000000, 0x000000, 0x9e005d, 0x9e005d, 0x9e005d, 0x9e005d, 0x18020e, 0x000000, 0xa9794f, 0xc5956a, 0xf6d39b, 0xf6d39b, 0xfaf3c9, 0xf6d39b, 0xa9794f, 0x000000, 0x000000, 0x3d2214, 0x764221, 0x3d2214, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xa19a91, 0xffffce, 0xffffce, 0xa19a91, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffce, 0xffffce, 0x000000, 0x000000, 0x690039, 0x690039, 0x9e005d, 0xf6adcd, 0xef5ba1, 0x9e005d, 0x5f2f31, 0x5d422f, 0xf6d39b, 0xfaf3c9, 0xfaf3c9, 0xc5956a, 0xa9794f, 0x000000, 0x000000, 0x000000, 0x3d2214, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xa19a91, 0xffffce, 0xffffce, 0xa19a91, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffce, 0xffffce, 0x000000, 0x000000, 0x000000, 0x2c0018, 0x690039, 0x9e005d, 0xef5ba1, 0x9e005d, 0x9e005d, 0x5d3f2f, 0xa9794f, 0xc5956a, 0xc5956a, 0xc5956a, 0x9e005d, 0x690039, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffce, 0xffffce, 0xa19a91, 0xa19a91, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xffffce, 0xffffce, 0x000000, 0x31526b, 0x31526b, 0x31526b, 0x31001b, 0x690039, 0xef5ba1, 0xef5ba1, 0x9e005d, 0x9e005d, 0x9e005d, 0x9e005d, 0x9e005d, 0xef5ba1, 0x9e005d, 0x690039, 0x31526b, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xa19a91, 0xffffce, 0xa19a91, 0xa19a91, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xa19a91, 0xffffce, 0x000000, 0x31526b, 0x638c94, 0x94c6c6, 0xc6e7e7, 0x31001a, 0x690039, 0x9e005d, 0xef5ba1, 0xef5ba1, 0xf6adcd, 0xf6adcd, 0xf6adcd, 0xef5ba1, 0x9e005d, 0x1d00f, 0xc6e7e7, 0xc6e7e7, 0x182931, 0x000000, 0x000000, 0x000000, 0x000000, 0xf0f0e8, 0x525239, 0xffffce, 0xa19a91, 0xa19a91, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xa19a91, 0xffffce, 0x000000, 0x000000, 0x638c94, 0x94c6c6, 0xc6e7e7, 0x000000, 0x230013, 0x690039, 0x9e005d, 0x9e005d, 0xef5ba1, 0xef5ba1, 0x9e005d, 0x690039, 0x690039, 0x31526b, 0xc6e7e7, 0xc6e7e7, 0x638c94, 0x182931, 0x000000, 0x000000, 0xf0f0e8, 0xf0f0e8, 0x525239, 0xa19a91, 0x525239, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xa19a91, 0xffffce, 0x000000, 0x000000, 0x000000, 0x638c94, 0x94c6c6, 0x31526b, 0x31526b, 0x354b66, 0x381325, 0x9e005d, 0x9e005d, 0x690039, 0x690039, 0x270015, 0x31526b, 0x31526b, 0x638c94, 0x638c94, 0x638c94, 0x638c94, 0x638c94, 0x000000, 0xf0f0e8, 0xf0f0e8, 0x94c6c6, 0x638c94, 0x638c94, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x525239, 0xa19a91, 0x525239, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x638c94, 0x94c6c6, 0x638c94, 0x94c6c6, 0xc6e7e7, 0x94c6c6, 0xc6e7e7, 0xc6e7e7, 0x31526b, 0x000000, 0x000000, 0x31526b, 0x31526b, 0x638c94, 0x31526b, 0x804830, 0xf0f0e8, 0x94c6c6, 0x94c6c6, 0x638c94, 0x638c94, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x638c94, 0x638c94, 0xc6e7e7, 0xc6e7e7, 0x000000, 0x000000, 0x31526b, 0x000000, 0x638c94, 0x638c94, 0x94c6c6, 0xc6e7e7, 0xc6e7e7, 0xc6e7e7, 0xc6e7e7, 0x31526b, 0x000000, 0x000000, 0x000000, 0x000000, 0x638c94, 0x638c94, 0x31526b, 0xc88060, 0xf8c090, 0xc88060, 0x94c6c6, 0x638c94, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x182931, 0x638c94, 0x638c94, 0x94c6c6, 0xc6e7e7, 0xf0f0e8, 0xf0f0e8, 0x31526b, 0x31526b, 0x000000, 0x000000, 0x000000, 0x638c94, 0x94c6c6, 0x94c6c6, 0x000000, 0x000000, 0x94c6c6, 0x638c94, 0x31526b, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0xc88060, 0xf8c090, 0xf8c090, 0x804830, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x182931, 0x638c94, 0x638c94, 0x94c6c6, 0xc6e7e7, 0xf0f0e8, 0xf0f0e8, 0x000000, 0x31526b, 0x638c94, 0x94c6c6, 0x94c6c6, 0x000000, 0x31526b, 0x000000, 0x638c94, 0xc6e7e7, 0x94c6c6, 0x638c94, 0x31526b, 0x31526b, 0x000000, 0x000000, 0x000000, 0x000000, 0x804830, 0xc88060, 0x804830, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x182931, 0x000000, 0x638c94, 0x638c94, 0x94c6c6, 0x94c6c6, 0x000000, 0x000000, 0x31526b, 0x638c94, 0x94c6c6, 0xc6e7e7, 0xc6e7e7, 0xc6e7e7, 0xc6e7e7, 0xc6e7e7, 0xc6e7e7, 0x94c6c6, 0x31526b, 0x9c9c9c, 0x9c9c9c, 0x2d2d2d, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x638c94, 0x2d2d2d, 0xc88060, 0x2d2d2d, 0x666666, 0x666666, 0x31526b, 0x638c94, 0x638c94, 0x638c94, 0xc6e7e7, 0xc6e7e7, 0x94c6c6, 0x638c94, 0x31526b, 0x666666, 0x666666, 0x9c9c9c, 0xcdcdcd, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x804830, 0x804830, 0xc88060, 0x804830, 0x2d2d2d, 0x666666, 0x9c9c9c, 0x9c9c9c, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x2d2d2d, 0x2d2d2d, 0x666666, 0x9c9c9c, 0xcdcdcd, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x101010, 0x690039, 0x101010, 0x804830, 0x804830, 0x9e005d, 0x2d2d2d, 0x666666, 0x9c9c9c, 0x9c9c9c, 0x2d2d2d, 0x2d2d2d, 0x690039, 0x9e005d, 0xd6007f, 0xd6007f, 0x9e005d, 0x690039, 0x2d2d2d, 0x2d2d2d, 0x666666, 0x000000, 0x000000, 0xc08008, 0x804018, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x101010, 0x690039, 0x690039, 0x9e005d, 0x101010, 0x9e005d, 0x9e005d, 0x2d2d2d, 0x9c9c9c, 0xcdcdcd, 0xcdcdcd, 0x2d2d2d, 0x690039, 0x9e005d, 0xd6007f, 0xd6007f, 0x9e005d, 0x690039, 0x101010, 0x101010, 0x2d2d2d, 0x000000, 0x000000, 0xc08008, 0xc08008, 0x804018, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x101010, 0x690039, 0x690039, 0x9e005d, 0x690039, 0x2d2d2d, 0x2d2d2d, 0x9c9c9c, 0x9c9c9c, 0x2d2d2d, 0x690039, 0x690039, 0x690039, 0x9e005d, 0x690039, 0x101010, 0x101010, 0x000000, 0x000000, 0x000000, 0x582820, 0x804018, 0x804018, 0x582820, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x101010, 0x101010, 0x690039, 0x281010, 0x000000, 0x000000, 0x666666, 0x2d2d2d, 0x000000, 0x101010, 0x101010, 0x101010, 0x101010, 0x101010, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x582820, 0x582820, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x582820, 0x582820, 0x804018, 0x000000, 0x281010, 0x281010, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x582820, 0x582820, 0x000000, 0x000000, 0x150033, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x582820, 0x804018, 0x804018, 0x804018, 0xc08008, 0xc08008, 0x582820, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x150033, 0x150033, 0x281010, 0x281010, 0x281010, 0x582820, 0x804018, 0x804018, 0x000000, 0x000000, 0x150033, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x281010, 0x582820, 0x582820, 0x804018, 0x804018, 0x000000, 0x000000, 0x000000, 0x000000, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x281010, 0x281010, 0x582820, 0x804018, 0x804018, 0x804018, 0xc08008, 0xc08008, 0x804018, 0x804018, 0x150033, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x582820, 0x281010, 0x281010, 0x281010, 0x000000, 0x000000, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x281010, 0x000000, 0x582820, 0x582820, 0x804018, 0x804018, 0xc08008, 0xc08008, 0xc08008, 0x804018, 0x000000, 0x150033, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x150033, 0x582820, 0xc08008, 0x804018, 0x804018, 0x804018, 0x000000, 0x000000, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x000000, 0x000000, 0x000000, 0x000000, 0x804018, 0x804018, 0x804018, 0x804018, 0x000000, 0x000000, 0x150033, 0x150033, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x150033, 0x150033, 0x582820, 0x804018, 0xc08008, 0xc08008, 0xc08008, 0x804018, 0x281010, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x150033, 0x150033, 0x150033, 0x150033, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x150033, 0x150033, 0x150033, 0x582820, 0x582820, 0x804018, 0xc08008, 0xc08008, 0x804018, 0x281010, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x150033, 0x150033, 0x150033, 0x000000, 0x582820, 0x582820, 0x804018, 0x582820, 0x281010, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x000000, 0x000000, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x150033, 0x150033, 0x150033, 0x281010, 0x281010, 0x281010, 0x020d02, 0x150033, 0x150033, 0x150033, 0x150033, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x150033, 0x150033, 0x150033, 0x150033, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x150033, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x150033, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000,0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, ,0x01000000, 0x01000000
TESTING: .word 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x01000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x01000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x01000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x01000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x01000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x01000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x01000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x01000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x01000000, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x00FF00, 0x01000000, 0x01000000, 
linea: .word 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0xFF0000, 0x01000000, 0x01000000 

.text###################======MAIN======###################
la $a0, vecinos1
la $a0,warrior  		# la direccion del rombo
la $a1, display     	# la direcion del display
li $a2, 100				# posición x
li $a3, 100				# posición y
#jal MOSTRAR         	# llamamos a mostrar


#la $a0, linea
#la $a0, warrior
#la $a0, TESTING
#li $a2, 140
#li $a3, 100
#jal MOSTRAR
#li $a2, 180
#li $a3, 100
#jal MOSTRAR
#li $a2, 120
#li $a3, 110
#jal MOSTRAR
#li $a2, 160
#li $a3, 110
#jal MOSTRAR

#test#
li $a0, 3
li $a1, 3
jal get_vecinos1
la $t0, vecinos1
li $t1, 0 #cuenta
li $t2, 48


FOR:
beq $t1,$t2, FINLOOP
	lw $a0, 0($t0)
	addi $v0, $zero, 1
	syscall
	la $a0, ESPACIO
	addi $v0, $zero, 4
	syscall
	
	addi $t0, $t0, 4
	addi $t1, $t1, 1
	j FOR
FINLOOP:
#test_fin#


j FIN


###########################################################################################################
# Mostrar: muestra una imagen referenciada por $a0, en el display de $a1, en la posicion x,y ($a3,$a3)
# al encontrar un fin de linea en el array, comienza a mostrar en la siguiente fila del display.
# termina cuando encuentra 2 fin de linea seguidos.
# fin de linea = 16777216 = 0xFFFFFF + 1
# $a0 direccion del array
# $a1 direccion de inicio del display
# $a2 posicion x
# $a3 posicion y
MOSTRAR:
#2048 para saltar fila.
li $t0, 2048
mul $t0, $t0, $a3		# desplazamiento en Y x 2048.
add $a1, $a1, $t0		# deplazar el display en Y filas.
sll $t1, $a2, 2			# x*4
add $a1, $a1, $t1		# desplazar el display en X columnas.	

add $t6, $a0, $zero		# t6 direccion del array
add $t7, $a1, $zero		# t7 direccion del display
addi $t5, $zero, 0		# columna actual

WHILE_COLUMNA:                     # mientras mostremos una columna
lw $t1, 0($t6)                     # cargamos la palabra de la direccion de memoria del array
beq $t1, 16777216, SALTAR_FILA     # si nos encontramos con un fin de linea hay que saltar a la siguiente fila
beq $t1, $zero, NO_IMPRIMIR
sw $t1, 0($t7)                     # si no nos saltamos la fila, entonces copiamos el valor al display
NO_IMPRIMIR:
addi $t6, $t6, 4                   # nos movemos una palabra en el array
addi $t7, $t7, 4                   # nos movemos una palabra en el display
j WHILE_COLUMNA

SALTAR_FILA:                        # Nos vamos a saltar una fila, pero debemos revisar si no hemos terminado (dos ceros seguidos)
addi $t6, $t6, 4                    # Nos movemos al siguiente elemento del array
lw $t1, 0($t6)                      # cargamos el siguiente elemento del array
beq $t1, 16777216, FIN_MOSTRAR      # ¿Hay un fin de linea?, entonces encontramos dos fin de lineas seguidos y terminamos

addi $t5, $t5, 1                    # ¿no encontramos un cero?, entonces nos movemos a la siguiente columa

mul $t1, $t5, 2048                  # la direccion de la siguiente columna es: (NUMERO_COLUMNA * 2048), 2048 ya que es un array de words: 4*512

add $t7, $a1, $t1                   # la nueva direccion del display es: NUMERO_COLUMNA * 2048 + Display => offset + display
j WHILE_COLUMNA                     # mostramos la siguiente columa

FIN_MOSTRAR:                        # Encontramos los dos ceros seguidos asi que terminamos
la $a1, display						# restaura la posicion original del display, para multiples impresiones sucesivas.
jr $ra                              # retornamos
# Fin de Mostrar


###########################################################################################################
#Index: obtiene la dirección de matrix[i][j]
#a0 = matrix
#a1 = número de columnas.
#a2 = i
#a3 = j
#v0 = &matrix[i][j]
index:
sll $t0, $a2, 2 		# $t0 = i*4
mul $t0, $t0, $a1 		# $t0 = i*4*columnas
sll $t1, $a3, 2			# $t1 = j*4
add $t0, $t0, $t1 		# $t0 = i*4*columnas + j*4 = offset de matrix
add $v0, $a0, $t0		# return &matrix[i][j]
jr $ra
# Fin de Index






###########################################################################################################
# get_vecinos1: genera una lista de celdas vecinas a una celda pasada como argumento
# 				la lista es un arreglo ya definido en .data,donde se guardan:
#				(i, j, matrix[i][j], &matrix[i][j]) de cada celda
#				y retorna en $v0 cuantos elementos son válidos.
# $a0 = i de la celda a buscar
# $a1 = j de la celda a buscar
get_vecinos1:
li $s0, 0					#$s0 =  cuenta = 0
la $s1, vecinos1			#$s1 = &vecinos1

#Index matrix[i][j-1]________________________________________________________
addi $sp ,$sp, -16
sw $ra, 12($sp)
sw $a0, 8($sp)
sw $a1, 4($sp)
sw $s0, 0($sp)
#argumentos y llamada
addi $a3, $a1, -1			# j-1 
move $a2, $a0				# i
li $a1, 13					# tamaño matrix
la $a0, matrix				# matrix
jal index					# &matrix[i][j-1]
move $t2,$a2				# $t2 = i
move $t3,$a3				# $t3 = j-1
lw $ra, 12($sp)
lw $a0, 8($sp)
lw $a1, 4($sp)
lw $s0, 0($sp)
addi $sp, $sp, 16

move $t0, $v0				# $t0 = &matrix[i][j-1]
lw $t1, 0($v0)				# $t1 =  matrix[i][j-1]
beq $t1, $zero, gv1_else1	#if matrix[i][j-1] == 0, jump
	#no es cero
	sw $t2, 0($s1)			#vecinos[0]=i
	sw $t3, 4($s1)			#vecinos[1]=j-1
	sw $t1, 8($s1)			#vecinos[2]= matrix[i][j-1]
	sw $t0, 12($s1)			#vecinos[3]= &matrix[i][j-1]
	addi $s0,$s0,1			#cuenta++;
	addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
gv1_else1:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.

#Index matrix[i][j+1]_______________________________________________________________
addi $sp ,$sp, -16
sw $ra, 12($sp)
sw $a0, 8($sp)
sw $a1, 4($sp)
sw $s0, 0($sp)
#argumentos y llamada
addi $a3, $a1, 1			# j+1 
move $a2, $a0				# i
li $a1, 13					# tamaño matrix
la $a0, matrix				# matrix
jal index					# &matrix[i][j+1]
move $t2,$a2				# $t2 = i
move $t3,$a3				# $t3 = j+1
lw $ra, 12($sp)
lw $a0, 8($sp)
lw $a1, 4($sp)
lw $s0, 0($sp)
addi $sp, $sp, 16

move $t0, $v0				# $t0 = &matrix[i][j+1]
lw $t1, 0($v0)				# $t1 =  matrix[i][j+1]
beq $t1, $zero, gv1_else2	#if matrix[i][j+1] == 0, jump
	#no es cero
	sw $t2, 0($s1)			#vecinos[0]=i
	sw $t3, 4($s1)			#vecinos[1]=j+1
	sw $t1, 8($s1)			#vecinos[2]= matrix[i][j+1]
	sw $t0, 12($s1)			#vecinos[3]= &matrix[i][j+1]
	addi $s0,$s0,1			#cuenta++;
	addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
gv1_else2:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.

#Index matrix[i-1][j]_______________________________________________________________
addi $sp ,$sp, -16
sw $ra, 12($sp)
sw $a0, 8($sp)
sw $a1, 4($sp)
sw $s0, 0($sp)
#argumentos y llamada
addi $a2, $a0, -1			# i-1 
move $a3, $a1				# j
li $a1, 13					# tamaño matrix
la $a0, matrix				# matrix
jal index					# &matrix[i-1][j]
move $t2,$a2				# $t2 = i-1
move $t3,$a3				# $t3 = j
lw $ra, 12($sp)
lw $a0, 8($sp)
lw $a1, 4($sp)
lw $s0, 0($sp)
addi $sp, $sp, 16

move $t0, $v0				# $t0 = &matrix[i-1][j]
lw $t1, 0($v0)				# $t1 =  matrix[i-1][j]
beq $t1, $zero, gv1_else3	#if matrix[i-1][j] == 0, jump
	#no es cero
	sw $t2, 0($s1)			#vecinos[0]=i-1
	sw $t3, 4($s1)			#vecinos[1]=j
	sw $t1, 8($s1)			#vecinos[2]= matrix[i-1][j]
	sw $t0, 12($s1)			#vecinos[3]= &matrix[i-1][j]
	addi $s0,$s0,1			#cuenta++;
	addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
gv1_else3:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.

#Index matrix[i+1][j]_______________________________________________________________
addi $sp ,$sp, -16
sw $ra, 12($sp)
sw $a0, 8($sp)
sw $a1, 4($sp)
sw $s0, 0($sp)
#argumentos y llamada
addi $a2, $a0, 1			# i+1 
move $a3, $a1				# j
li $a1, 13					# tamaño matrix
la $a0, matrix				# matrix
jal index					# &matrix[i+1][j]
move $t2,$a2				# $t2 = i+1
move $t3,$a3				# $t3 = j
lw $ra, 12($sp)
lw $a0, 8($sp)
lw $a1, 4($sp)
lw $s0, 0($sp)
addi $sp, $sp, 16

move $t0, $v0				# $t0 = &matrix[i+1][j]
lw $t1, 0($v0)				# $t1 =  matrix[i+1][j]
beq $t1, $zero, gv1_else4	#if matrix[i+1][j] == 0, jump
	#no es cero
	sw $t2, 0($s1)			#vecinos[0]=i+1
	sw $t3, 4($s1)			#vecinos[1]=j
	sw $t1, 8($s1)			#vecinos[2]= matrix[i+1][j]
	sw $t0, 12($s1)			#vecinos[3]= &matrix[i+1][j]
	addi $s0,$s0,1			#cuenta++;
	addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
gv1_else4:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.


#obtener el bit[0] para saber si es par o impar.
sll $t9, $a1,31
srl $t9, $t9,31
beq $t9, $zero, gv1_par		# si es par salta a par
j gv1_impar					#si no es par, salta a impar
gv1_par:					# para el caso par, se consideran los vecinos de arriba
#___Index matrix[i-1][j-1]_______________________________________________________________
	addi $sp ,$sp, -16
	sw $ra, 12($sp)
	sw $a0, 8($sp)
	sw $a1, 4($sp)
	sw $s0, 0($sp)
	#argumentos y llamada
	addi $a2, $a0, -1			# i-1
	addi $a3, $a1, -1			# j-1
	li $a1, 13					# tamaño matrix
	la $a0, matrix				# matrix
	jal index					# &matrix[i-1][j-1]
	move $t2,$a2				# $t2 = i-1
	move $t3,$a3				# $t3 = j-1
	lw $ra, 12($sp)
	lw $a0, 8($sp)
	lw $a1, 4($sp)
	lw $s0, 0($sp)
	addi $sp, $sp, 16

	move $t0, $v0				# $t0 = &matrix[i-1][j-1]
	lw $t1, 0($v0)				# $t1 =  matrix[i-1][j-1]
	beq $t1, $zero, gv1_else5	#if matrix[i-1][j-1] == 0, jump
		#no es cero
		sw $t2, 0($s1)			#vecinos[0]=i-1
		sw $t3, 4($s1)			#vecinos[1]=j-1
		sw $t1, 8($s1)			#vecinos[2]= matrix[i-1][j-1]
		sw $t0, 12($s1)			#vecinos[3]= &matrix[i-1][j-1]
		addi $s0,$s0,1			#cuenta++;
		addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
	gv1_else5:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.

#___Index matrix[i-1][j+1]_______________________________________________________________
	addi $sp ,$sp, -16
	sw $ra, 12($sp)
	sw $a0, 8($sp)
	sw $a1, 4($sp)
	sw $s0, 0($sp)
	#argumentos y llamada
	addi $a2, $a0, -1			# i-1
	addi $a3, $a1, 1			# j+1
	li $a1, 13					# tamaño matrix
	la $a0, matrix				# matrix
	jal index					# &matrix[i-1][j+1]
	move $t2,$a2				# $t2 = i+1
	move $t3,$a3				# $t3 = j+1
	lw $ra, 12($sp)
	lw $a0, 8($sp)
	lw $a1, 4($sp)
	lw $s0, 0($sp)
	addi $sp, $sp, 16

	move $t0, $v0				# $t0 = &matrix[i-1][j+1]
	lw $t1, 0($v0)				# $t1 =  matrix[i-1][j+1]
	beq $t1, $zero, gv1_else6	#if matrix[i-1][j+1] == 0, jump
		#no es cero
		sw $t2, 0($s1)			#vecinos[0]=i-1
		sw $t3, 4($s1)			#vecinos[1]=j+1
		sw $t1, 8($s1)			#vecinos[2]= matrix[i-1][j+1]
		sw $t0, 12($s1)			#vecinos[3]= &matrix[i-1][j+1]
		addi $s0,$s0,1			#cuenta++;
		addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
	gv1_else6:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.
j gv1_fin_par_impar
gv1_impar:					# para el caso impar, se consideran los vecinos de abajo.
#___Index matrix[i+1][j+1]_______________________________________________________________
	addi $sp ,$sp, -16
	sw $ra, 12($sp)
	sw $a0, 8($sp)
	sw $a1, 4($sp)
	sw $s0, 0($sp)
	#argumentos y llamada
	addi $a2, $a0, 1			# i+1
	addi $a3, $a1, 1			# j+1
	li $a1, 13					# tamaño matrix
	la $a0, matrix				# matrix
	jal index					# &matrix[i+1][j+1]
	move $t2,$a2				# $t2 = i+1
	move $t3,$a3				# $t3 = j+1
	lw $ra, 12($sp)
	lw $a0, 8($sp)
	lw $a1, 4($sp)
	lw $s0, 0($sp)
	addi $sp, $sp, 16

	move $t0, $v0				# $t0 = &matrix[i+1][j+1]
	lw $t1, 0($v0)				# $t1 =  matrix[i+1][j+1]
	beq $t1, $zero, gv1_else7	#if matrix[i+1][j+1] == 0, jump
		#no es cero
		sw $t2, 0($s1)			#vecinos[0]=i+1
		sw $t3, 4($s1)			#vecinos[1]=j+1
		sw $t1, 8($s1)			#vecinos[2]= matrix[i+1][j+1]
		sw $t0, 12($s1)			#vecinos[3]= &matrix[i+1][j+1]
		addi $s0,$s0,1			#cuenta++;
		addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
	gv1_else7:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.

#___Index matrix[i+1][j-1]_______________________________________________________________
	addi $sp ,$sp, -16
	sw $ra, 12($sp)
	sw $a0, 8($sp)
	sw $a1, 4($sp)
	sw $s0, 0($sp)
	#argumentos y llamada
	addi $a2, $a0, 1			# i+1
	addi $a3, $a1, -1			# j-1
	li $a1, 13					# tamaño matrix
	la $a0, matrix				# matrix
	jal index					# &matrix[i+1][j-1]
	move $t2,$a2				# $t2 = i+1
	move $t3,$a3				# $t3 = j-1
	lw $ra, 12($sp)
	lw $a0, 8($sp)
	lw $a1, 4($sp)
	lw $s0, 0($sp)
	addi $sp, $sp, 16

	move $t0, $v0				# $t0 = &matrix[i+1][j-1]
	lw $t1, 0($v0)				# $t1 =  matrix[i+1][j-1]
	beq $t1, $zero, gv1_else8	#if matrix[i+1][j-1] == 0, jump
		#no es cero
		sw $t2, 0($s1)			#vecinos[0]=i+1
		sw $t3, 4($s1)			#vecinos[1]=j-1
		sw $t1, 8($s1)			#vecinos[2]= matrix[i+1][j-1]
		sw $t0, 12($s1)			#vecinos[3]= &matrix[i+1][j-1]
		addi $s0,$s0,1			#cuenta++;
		addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
	gv1_else8:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.
gv1_fin_par_impar:
move $v0, $s0					#return cuenta
jr $ra
#Fin get_vecinos1








###########################################################################################################
# get_vecinos2: genera una lista de celdas vecinas(en el 2° perimetro) a una celda pasada como argumento
# 				la lista es un arreglo ya definido en .data,donde se guardan:
#				(i, j, matrix[i][j], &matrix[i][j]) de cada celda
#				y retorna en $v0 cuantos elementos son válidos.
# $a0 = i de la celda a buscar
# $a1 = j de la celda a buscar
get_vecinos2:
li $s0, 0					#$s0 =  cuenta = 0
la $s1, vecinos2			#$s1 = &vecinos2

#Index matrix[i-1][j-2]________________________________________________________
addi $sp ,$sp, -16
sw $ra, 12($sp)
sw $a0, 8($sp)
sw $a1, 4($sp)
sw $s0, 0($sp)
#argumentos y llamada
addi $a3, $a1, -2			# j-2 
addi $a2, $a0, -1			# i-1
li $a1, 13					# tamaño matrix
la $a0, matrix				# matrix
jal index					# &matrix[i-1][j-2]
move $t2,$a2				# $t2 = i-1
move $t3,$a3				# $t3 = j-2
lw $ra, 12($sp)
lw $a0, 8($sp)
lw $a1, 4($sp)
lw $s0, 0($sp)
addi $sp, $sp, 16

move $t0, $v0				# $t0 = &matrix[i-1][j-2]
lw $t1, 0($v0)				# $t1 =  matrix[i-1][j-2]
beq $t1, $zero, gv2_else1	#if matrix[i-1][j-2] == 0, jump
	#no es cero
	sw $t2, 0($s1)			#vecinos[0]=i1
	sw $t3, 4($s1)			#vecinos[1]=j-2
	sw $t1, 8($s1)			#vecinos[2]= matrix[i-1][j-2]
	sw $t0, 12($s1)			#vecinos[3]= &matrix[i-1][j-2]
	addi $s0,$s0,1			#cuenta++;
	addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
gv2_else1:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.

#Index matrix[i][j-2]_______________________________________________________________
addi $sp ,$sp, -16
sw $ra, 12($sp)
sw $a0, 8($sp)
sw $a1, 4($sp)
sw $s0, 0($sp)
#argumentos y llamada
addi $a3, $a1, -2			# j-2 
move $a2, $a0				# i
li $a1, 13					# tamaño matrix
la $a0, matrix				# matrix
jal index					# &matrix[i][j-2]
move $t2,$a2				# $t2 = i
move $t3,$a3				# $t3 = j-2
lw $ra, 12($sp)
lw $a0, 8($sp)
lw $a1, 4($sp)
lw $s0, 0($sp)
addi $sp, $sp, 16

move $t0, $v0				# $t0 = &matrix[i][j-2]
lw $t1, 0($v0)				# $t1 =  matrix[i][j-2]
beq $t1, $zero, gv2_else2	#if matrix[i][j-2] == 0, jump
	#no es cero
	sw $t2, 0($s1)			#vecinos[0]=i
	sw $t3, 4($s1)			#vecinos[1]=j-2
	sw $t1, 8($s1)			#vecinos[2]= matrix[i][j-2]
	sw $t0, 12($s1)			#vecinos[3]= &matrix[i][j-2]
	addi $s0,$s0,1			#cuenta++;
	addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
gv2_else2:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.

#Index matrix[i+1][j-2]_______________________________________________________________
addi $sp ,$sp, -16
sw $ra, 12($sp)
sw $a0, 8($sp)
sw $a1, 4($sp)
sw $s0, 0($sp)
#argumentos y llamada
addi $a2, $a0, 1			# i+1 
addi $a3, $a1, -2			# j-2
li $a1, 13					# tamaño matrix
la $a0, matrix				# matrix
jal index					# &matrix[i+1][j-2]
move $t2,$a2				# $t2 = i+1
move $t3,$a3				# $t3 = j-2
lw $ra, 12($sp)
lw $a0, 8($sp)
lw $a1, 4($sp)
lw $s0, 0($sp)
addi $sp, $sp, 16

move $t0, $v0				# $t0 = &matrix[i+1][j-2]
lw $t1, 0($v0)				# $t1 =  matrix[i+1][j-2]
beq $t1, $zero, gv2_else3	#if matrix[i+1][j-2] == 0, jump
	#no es cero
	sw $t2, 0($s1)			#vecinos[0]=i+1
	sw $t3, 4($s1)			#vecinos[1]=j-2
	sw $t1, 8($s1)			#vecinos[2]= matrix[i+1][j-2]
	sw $t0, 12($s1)			#vecinos[3]= &matrix[i+1][j-2]
	addi $s0,$s0,1			#cuenta++;
	addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
gv2_else3:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.

#Index matrix[i+1][j+2]_______________________________________________________________
addi $sp ,$sp, -16
sw $ra, 12($sp)
sw $a0, 8($sp)
sw $a1, 4($sp)
sw $s0, 0($sp)
#argumentos y llamada
addi $a2, $a0, 1			# i+1 
addi $a3, $a1, 2			# j+2
li $a1, 13					# tamaño matrix
la $a0, matrix				# matrix
jal index					# &matrix[i+1][j+2]
move $t2,$a2				# $t2 = i+1
move $t3,$a3				# $t3 = j+2
lw $ra, 12($sp)
lw $a0, 8($sp)
lw $a1, 4($sp)
lw $s0, 0($sp)
addi $sp, $sp, 16

move $t0, $v0				# $t0 = &matrix[i+1][j+2]
lw $t1, 0($v0)				# $t1 =  matrix[i+1][j+2]
beq $t1, $zero, gv2_else4	#if matrix[i+1][j+2] == 0, jump
	#no es cero
	sw $t2, 0($s1)			#vecinos[0]=i+1
	sw $t3, 4($s1)			#vecinos[1]=j+2
	sw $t1, 8($s1)			#vecinos[2]= matrix[i+1][j+2]
	sw $t0, 12($s1)			#vecinos[3]= &matrix[i+1][j+2]
	addi $s0,$s0,1			#cuenta++;
	addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
gv2_else4:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.

#Index matrix[i][j+2]_______________________________________________________________
addi $sp ,$sp, -16
sw $ra, 12($sp)
sw $a0, 8($sp)
sw $a1, 4($sp)
sw $s0, 0($sp)
#argumentos y llamada
move $a2, $a0				# i 
addi $a3, $a1, 2			# j+2
li $a1, 13					# tamaño matrix
la $a0, matrix				# matrix
jal index					# &matrix[i][j+2]
move $t2,$a2				# $t2 = i
move $t3,$a3				# $t3 = j+2
lw $ra, 12($sp)
lw $a0, 8($sp)
lw $a1, 4($sp)
lw $s0, 0($sp)
addi $sp, $sp, 16

move $t0, $v0				# $t0 = &matrix[i][j+2]
lw $t1, 0($v0)				# $t1 =  matrix[i][j+2]
beq $t1, $zero, gv2_else5	#if matrix[i][j+2] == 0, jump
	#no es cero
	sw $t2, 0($s1)			#vecinos[0]=i
	sw $t3, 4($s1)			#vecinos[1]=j+2
	sw $t1, 8($s1)			#vecinos[2]= matrix[i][j+2]
	sw $t0, 12($s1)			#vecinos[3]= &matrix[i][j+2]
	addi $s0,$s0,1			#cuenta++;
	addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
gv2_else5:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.

#Index matrix[i-1][j+2]_______________________________________________________________
addi $sp ,$sp, -16
sw $ra, 12($sp)
sw $a0, 8($sp)
sw $a1, 4($sp)
sw $s0, 0($sp)
#argumentos y llamada
addi $a2, $a0, -1			# i-1 
addi $a3, $a1, 2			# j+2
li $a1, 13					# tamaño matrix
la $a0, matrix				# matrix
jal index					# &matrix[i-1][j+2]
move $t2,$a2				# $t2 = i-1
move $t3,$a3				# $t3 = j+2
lw $ra, 12($sp)
lw $a0, 8($sp)
lw $a1, 4($sp)
lw $s0, 0($sp)
addi $sp, $sp, 16

move $t0, $v0				# $t0 = &matrix[i-1][j+2]
lw $t1, 0($v0)				# $t1 =  matrix[i-1][j+2]
beq $t1, $zero, gv2_else6	#if matrix[i-1][j+2] == 0, jump
	#no es cero
	sw $t2, 0($s1)			#vecinos[0]=i-1
	sw $t3, 4($s1)			#vecinos[1]=j+2
	sw $t1, 8($s1)			#vecinos[2]= matrix[i-1][j+2]
	sw $t0, 12($s1)			#vecinos[3]= &matrix[i-1][j+2]
	addi $s0,$s0,1			#cuenta++;
	addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
gv2_else6:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.

#obtener el bit[0] para saber si es par o impar.
sll $t9, $a1,31
srl $t9, $t9,31
beq $t9, $zero, gv2_par		# si es par salta a par
j gv2_impar					#si no es par, salta a impar
gv2_par:					# para el caso par, se consideran los vecinos de arriba
#___Index matrix[i-2][j-1]_______________________________________________________________
	addi $sp ,$sp, -16
	sw $ra, 12($sp)
	sw $a0, 8($sp)
	sw $a1, 4($sp)
	sw $s0, 0($sp)
	#argumentos y llamada
	addi $a2, $a0, -2			# i-2
	addi $a3, $a1, -1			# j-1
	li $a1, 13					# tamaño matrix
	la $a0, matrix				# matrix
	jal index					# &matrix[i-2][j-1]
	move $t2,$a2				# $t2 = i-2
	move $t3,$a3				# $t3 = j-1
	lw $ra, 12($sp)
	lw $a0, 8($sp)
	lw $a1, 4($sp)
	lw $s0, 0($sp)
	addi $sp, $sp, 16

	move $t0, $v0				# $t0 = &matrix[i-2][j-1]
	lw $t1, 0($v0)				# $t1 =  matrix[i-2][j-1]
	beq $t1, $zero, gv2_else7	#if matrix[i-2][j-1] == 0, jump
		#no es cero
		sw $t2, 0($s1)			#vecinos[0]=i-2
		sw $t3, 4($s1)			#vecinos[1]=j-1
		sw $t1, 8($s1)			#vecinos[2]= matrix[i-2][j-1]
		sw $t0, 12($s1)			#vecinos[3]= &matrix[i-2][j-1]
		addi $s0,$s0,1			#cuenta++;
		addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
	gv2_else7:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.

#___Index matrix[i-2][j+1]_______________________________________________________________
	addi $sp ,$sp, -16
	sw $ra, 12($sp)
	sw $a0, 8($sp)
	sw $a1, 4($sp)
	sw $s0, 0($sp)
	#argumentos y llamada
	addi $a2, $a0, -2			# i-2
	addi $a3, $a1, 1			# j+1
	li $a1, 13					# tamaño matrix
	la $a0, matrix				# matrix
	jal index					# &matrix[i-2][j+1]
	move $t2,$a2				# $t2 = i-2
	move $t3,$a3				# $t3 = j+1
	lw $ra, 12($sp)
	lw $a0, 8($sp)
	lw $a1, 4($sp)
	lw $s0, 0($sp)
	addi $sp, $sp, 16

	move $t0, $v0				# $t0 = &matrix[i-2][j+1]
	lw $t1, 0($v0)				# $t1 =  matrix[i-2][j+1]
	beq $t1, $zero, gv2_else8	#if matrix[i-2][j+1] == 0, jump
		#no es cero
		sw $t2, 0($s1)			#vecinos[0]=i-2
		sw $t3, 4($s1)			#vecinos[1]=j+1
		sw $t1, 8($s1)			#vecinos[2]= matrix[i-2][j+1]
		sw $t0, 12($s1)			#vecinos[3]= &matrix[i-2][j+1]
		addi $s0,$s0,1			#cuenta++;
		addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
	gv2_else8:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.

#___Index matrix[i-2][j]_______________________________________________________________
	addi $sp ,$sp, -16
	sw $ra, 12($sp)
	sw $a0, 8($sp)
	sw $a1, 4($sp)
	sw $s0, 0($sp)
	#argumentos y llamada
	addi $a2, $a0, -2			# i-2
	addi $a3, $a1, 0			# j
	li $a1, 13					# tamaño matrix
	la $a0, matrix				# matrix
	jal index					# &matrix[i-2][j]
	move $t2,$a2				# $t2 = i-2
	move $t3,$a3				# $t3 = j
	lw $ra, 12($sp)
	lw $a0, 8($sp)
	lw $a1, 4($sp)
	lw $s0, 0($sp)
	addi $sp, $sp, 16

	move $t0, $v0				# $t0 = &matrix[i-2][j]
	lw $t1, 0($v0)				# $t1 =  matrix[i-2][j]
	beq $t1, $zero, gv2_else9	#if matrix[i-2][j] == 0, jump
		#no es cero
		sw $t2, 0($s1)			#vecinos[0]=i-2
		sw $t3, 4($s1)			#vecinos[1]=j
		sw $t1, 8($s1)			#vecinos[2]= matrix[i-2][j]
		sw $t0, 12($s1)			#vecinos[3]= &matrix[i-2][j]
		addi $s0,$s0,1			#cuenta++;
		addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
	gv2_else9:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.

#___Index matrix[i+1][j-1]_______________________________________________________________
	addi $sp ,$sp, -16
	sw $ra, 12($sp)
	sw $a0, 8($sp)
	sw $a1, 4($sp)
	sw $s0, 0($sp)
	#argumentos y llamada
	addi $a2, $a0, 1			# i+1
	addi $a3, $a1, -1			# j-1
	li $a1, 13					# tamaño matrix
	la $a0, matrix				# matrix
	jal index					# &matrix[i+1][j-1]
	move $t2,$a2				# $t2 = i+1
	move $t3,$a3				# $t3 = j-1
	lw $ra, 12($sp)
	lw $a0, 8($sp)
	lw $a1, 4($sp)
	lw $s0, 0($sp)
	addi $sp, $sp, 16

	move $t0, $v0				# $t0 = &matrix[i+1][j-1]
	lw $t1, 0($v0)				# $t1 =  matrix[i+1][j-1]
	beq $t1, $zero, gv2_else10	#if matrix[i+1][j-1] == 0, jump
		#no es cero
		sw $t2, 0($s1)			#vecinos[0]=i+1
		sw $t3, 4($s1)			#vecinos[1]=j-1
		sw $t1, 8($s1)			#vecinos[2]= matrix[i+1][j-1]
		sw $t0, 12($s1)			#vecinos[3]= &matrix[i+1][j-1]
		addi $s0,$s0,1			#cuenta++;
		addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
	gv2_else10:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.

#___Index matrix[i+1][j+1]_______________________________________________________________
	addi $sp ,$sp, -16
	sw $ra, 12($sp)
	sw $a0, 8($sp)
	sw $a1, 4($sp)
	sw $s0, 0($sp)
	#argumentos y llamada
	addi $a2, $a0, 1			# i+1
	addi $a3, $a1, 1			# j+1
	li $a1, 13					# tamaño matrix
	la $a0, matrix				# matrix
	jal index					# &matrix[i+1][j+1]
	move $t2,$a2				# $t2 = i+1
	move $t3,$a3				# $t3 = j+1
	lw $ra, 12($sp)
	lw $a0, 8($sp)
	lw $a1, 4($sp)
	lw $s0, 0($sp)
	addi $sp, $sp, 16

	move $t0, $v0				# $t0 = &matrix[i+1][j+1]
	lw $t1, 0($v0)				# $t1 =  matrix[i+1][j+1]
	beq $t1, $zero, gv2_else11	#if matrix[i+1][j+1] == 0, jump
		#no es cero
		sw $t2, 0($s1)			#vecinos[0]=i+1
		sw $t3, 4($s1)			#vecinos[1]=j+1
		sw $t1, 8($s1)			#vecinos[2]= matrix[i+1][j+1]
		sw $t0, 12($s1)			#vecinos[3]= &matrix[i+1][j+1]
		addi $s0,$s0,1			#cuenta++;
		addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
	gv2_else11:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.

#___Index matrix[i+2][j]_______________________________________________________________
	addi $sp ,$sp, -16
	sw $ra, 12($sp)
	sw $a0, 8($sp)
	sw $a1, 4($sp)
	sw $s0, 0($sp)
	#argumentos y llamada
	addi $a2, $a0, 2			# i+2
	addi $a3, $a1, 0			# j
	li $a1, 13					# tamaño matrix
	la $a0, matrix				# matrix
	jal index					# &matrix[i+2][j]
	move $t2,$a2				# $t2 = i+2
	move $t3,$a3				# $t3 = j
	lw $ra, 12($sp)
	lw $a0, 8($sp)
	lw $a1, 4($sp)
	lw $s0, 0($sp)
	addi $sp, $sp, 16

	move $t0, $v0				# $t0 = &matrix[i+2][j]
	lw $t1, 0($v0)				# $t1 =  matrix[i+2][j]
	beq $t1, $zero, gv2_else12	#if matrix[i+2][j] == 0, jump
		#no es cero
		sw $t2, 0($s1)			#vecinos[0]=i+2
		sw $t3, 4($s1)			#vecinos[1]=j
		sw $t1, 8($s1)			#vecinos[2]= matrix[i+2][j]
		sw $t0, 12($s1)			#vecinos[3]= &matrix[i+2][j]
		addi $s0,$s0,1			#cuenta++;
		addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
	gv2_else12:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.

j gv2_fin_par_impar
gv2_impar:					# para el caso impar, se consideran los vecinos de abajo.

#___Index matrix[i+2][j-1]_______________________________________________________________
	addi $sp ,$sp, -16
	sw $ra, 12($sp)
	sw $a0, 8($sp)
	sw $a1, 4($sp)
	sw $s0, 0($sp)
	#argumentos y llamada
	addi $a2, $a0, 2			# i+2
	addi $a3, $a1, -1			# j-1
	li $a1, 13					# tamaño matrix
	la $a0, matrix				# matrix
	jal index					# &matrix[i+2][j-1]
	move $t2,$a2				# $t2 = i+2
	move $t3,$a3				# $t3 = j-1
	lw $ra, 12($sp)
	lw $a0, 8($sp)
	lw $a1, 4($sp)
	lw $s0, 0($sp)
	addi $sp, $sp, 16

	move $t0, $v0				# $t0 = &matrix[i+2][j-1]
	lw $t1, 0($v0)				# $t1 =  matrix[i+2][j-1]
	beq $t1, $zero, gv2_else13	#if matrix[i+2][j-1] == 0, jump
		#no es cero
		sw $t2, 0($s1)			#vecinos[0]=i+2
		sw $t3, 4($s1)			#vecinos[1]=j-1
		sw $t1, 8($s1)			#vecinos[2]= matrix[i+2][j-1]
		sw $t0, 12($s1)			#vecinos[3]= &matrix[i+2][j-1]
		addi $s0,$s0,1			#cuenta++;
		addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
	gv2_else13:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.

#___Index matrix[i+2][j]_______________________________________________________________
	addi $sp ,$sp, -16
	sw $ra, 12($sp)
	sw $a0, 8($sp)
	sw $a1, 4($sp)
	sw $s0, 0($sp)
	#argumentos y llamada
	addi $a2, $a0, 2			# i+2
	addi $a3, $a1, 0			# j
	li $a1, 13					# tamaño matrix
	la $a0, matrix				# matrix
	jal index					# &matrix[i+2][j]
	move $t2,$a2				# $t2 = i+2
	move $t3,$a3				# $t3 = j
	lw $ra, 12($sp)
	lw $a0, 8($sp)
	lw $a1, 4($sp)
	lw $s0, 0($sp)
	addi $sp, $sp, 16

	move $t0, $v0				# $t0 = &matrix[i+2][j]
	lw $t1, 0($v0)				# $t1 =  matrix[i+2][j]
	beq $t1, $zero, gv2_else14	#if matrix[i+2][j] == 0, jump
		#no es cero
		sw $t2, 0($s1)			#vecinos[0]=i+2
		sw $t3, 4($s1)			#vecinos[1]=j
		sw $t1, 8($s1)			#vecinos[2]= matrix[i+2][j]
		sw $t0, 12($s1)			#vecinos[3]= &matrix[i+2][j]
		addi $s0,$s0,1			#cuenta++;
		addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
	gv2_else14:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.

#___Index matrix[i+2][j+1]_______________________________________________________________
	addi $sp ,$sp, -16
	sw $ra, 12($sp)
	sw $a0, 8($sp)
	sw $a1, 4($sp)
	sw $s0, 0($sp)
	#argumentos y llamada
	addi $a2, $a0, 2			# i+2
	addi $a3, $a1, 1			# j+1
	li $a1, 13					# tamaño matrix
	la $a0, matrix				# matrix
	jal index					# &matrix[i+2][j+1]
	move $t2,$a2				# $t2 = i+2
	move $t3,$a3				# $t3 = j+1
	lw $ra, 12($sp)
	lw $a0, 8($sp)
	lw $a1, 4($sp)
	lw $s0, 0($sp)
	addi $sp, $sp, 16

	move $t0, $v0				# $t0 = &matrix[i+2][j+1]
	lw $t1, 0($v0)				# $t1 =  matrix[i+2][j+1]
	beq $t1, $zero, gv2_else15	#if matrix[i+2][j+1] == 0, jump
		#no es cero
		sw $t2, 0($s1)			#vecinos[0]=i+2
		sw $t3, 4($s1)			#vecinos[1]=j+1
		sw $t1, 8($s1)			#vecinos[2]= matrix[i+2][j+1]
		sw $t0, 12($s1)			#vecinos[3]= &matrix[i+2][j+1]
		addi $s0,$s0,1			#cuenta++;
		addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
	gv2_else15:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.

#___Index matrix[i-1][j-1]_______________________________________________________________
	addi $sp ,$sp, -16
	sw $ra, 12($sp)
	sw $a0, 8($sp)
	sw $a1, 4($sp)
	sw $s0, 0($sp)
	#argumentos y llamada
	addi $a2, $a0, -1			# i-1
	addi $a3, $a1, -1			# j-1
	li $a1, 13					# tamaño matrix
	la $a0, matrix				# matrix
	jal index					# &matrix[i-1][j-1]
	move $t2,$a2				# $t2 = i-1
	move $t3,$a3				# $t3 = j-1
	lw $ra, 12($sp)
	lw $a0, 8($sp)
	lw $a1, 4($sp)
	lw $s0, 0($sp)
	addi $sp, $sp, 16

	move $t0, $v0				# $t0 = &matrix[i-1][j-1]
	lw $t1, 0($v0)				# $t1 =  matrix[i-1][j-1]
	beq $t1, $zero, gv2_else16	#if matrix[i-1][j-1] == 0, jump
		#no es cero
		sw $t2, 0($s1)			#vecinos[0]=i-1
		sw $t3, 4($s1)			#vecinos[1]=j-1
		sw $t1, 8($s1)			#vecinos[2]= matrix[i-1][j-1]
		sw $t0, 12($s1)			#vecinos[3]= &matrix[i-1][j-1]
		addi $s0,$s0,1			#cuenta++;
		addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
	gv2_else16:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.

#___Index matrix[i-1][j+1]_______________________________________________________________
	addi $sp ,$sp, -16
	sw $ra, 12($sp)
	sw $a0, 8($sp)
	sw $a1, 4($sp)
	sw $s0, 0($sp)
	#argumentos y llamada
	addi $a2, $a0, -1			# i-1
	addi $a3, $a1, 1			# j+1
	li $a1, 13					# tamaño matrix
	la $a0, matrix				# matrix
	jal index					# &matrix[i-1][j+1]
	move $t2,$a2				# $t2 = i-1
	move $t3,$a3				# $t3 = j+1
	lw $ra, 12($sp)
	lw $a0, 8($sp)
	lw $a1, 4($sp)
	lw $s0, 0($sp)
	addi $sp, $sp, 16

	move $t0, $v0				# $t0 = &matrix[i-1][j+1]
	lw $t1, 0($v0)				# $t1 =  matrix[i-1][j+1]
	beq $t1, $zero, gv2_else17	#if matrix[i-1][j+1] == 0, jump
		#no es cero
		sw $t2, 0($s1)			#vecinos[0]=i-1
		sw $t3, 4($s1)			#vecinos[1]=j+1
		sw $t1, 8($s1)			#vecinos[2]= matrix[i-1][j+1]
		sw $t0, 12($s1)			#vecinos[3]= &matrix[i-1][j+1]
		addi $s0,$s0,1			#cuenta++;
		addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
	gv2_else17:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.

#___Index matrix[i-2][j]_______________________________________________________________
	addi $sp ,$sp, -16
	sw $ra, 12($sp)
	sw $a0, 8($sp)
	sw $a1, 4($sp)
	sw $s0, 0($sp)
	#argumentos y llamada
	addi $a2, $a0, -2			# i-2
	addi $a3, $a1, 0			# j
	li $a1, 13					# tamaño matrix
	la $a0, matrix				# matrix
	jal index					# &matrix[i-2][j]
	move $t2,$a2				# $t2 = i-2
	move $t3,$a3				# $t3 = j
	lw $ra, 12($sp)
	lw $a0, 8($sp)
	lw $a1, 4($sp)
	lw $s0, 0($sp)
	addi $sp, $sp, 16

	move $t0, $v0				# $t0 = &matrix[i-2][j]
	lw $t1, 0($v0)				# $t1 =  matrix[i-2][j]
	beq $t1, $zero, gv2_else18	#if matrix[i-2][j] == 0, jump
		#no es cero
		sw $t2, 0($s1)			#vecinos[0]=i-2
		sw $t3, 4($s1)			#vecinos[1]=j
		sw $t1, 8($s1)			#vecinos[2]= matrix[i-2][j]
		sw $t0, 12($s1)			#vecinos[3]= &matrix[i-2][j]
		addi $s0,$s0,1			#cuenta++;
		addi $s1, $s1, 16		#adelanta el puntero a vecinos para poder guardar la siguiente celda 
	gv2_else18:					#el valor es 0, indica que es una celda nula y no la agrega a los vecinos.

gv2_fin_par_impar:
move $v0, $s0					#return cuenta
jr $ra
#Fin get_vecinos2

FIN:
